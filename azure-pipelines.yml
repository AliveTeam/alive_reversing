trigger:
  - abi_break_refcount
strategy:
  matrix:
    Linux:
      imageName: ubuntu-latest
      cmake_generator_type: 'Unix Makefiles'
      cmake_vs_arch: ''
      cpack_package_type: DEB
      cpack_executable: cpack
      installer_package_path: $(System.DefaultWorkingDirectory)/build/relive-0.1-Linux.deb
      installer_package_artifact_name: RELIVE-Linux.deb
      qt5_dir: ''
      sdl2_dir: ''
      qt5_windows_name: ''
    macOS:
      imageName: macOS-latest
      cmake_generator_type: 'Unix Makefiles'
      cmake_vs_arch: ''
      cpack_package_type: DragNDrop
      cpack_executable: cpack
      installer_package_path: $(System.DefaultWorkingDirectory)/build/relive-0.1-Darwin.dmg
      installer_package_artifact_name: RELIVE-MacOSX.dmg
      qt5_dir: /usr/local/opt/qt@5
      sdl2_dir: ''
      qt5_windows_name: ''
    Windows32:
      imageName: windows-2019
      cmake_generator_type: 'Visual Studio 16 2019'
      cmake_vs_arch: '-A Win32'
      cpack_package_type: ZIP
      cpack_executable: cpack.exe
      installer_package_path: $(System.DefaultWorkingDirectory)/build/relive-0.1-win32.zip
      installer_package_artifact_name: RELIVE-Windows32.zip
      qt5_dir: $(Build.SourcesDirectory)\Qt\5.15.2\msvc2019\lib\cmake\Qt5
      sdl2_dir: C:\Temp\SDL2-2.0.22
      qt5_windows_name: win32_msvc2019
    Windows64:
      imageName: windows-2019
      cmake_generator_type: 'Visual Studio 16 2019'
      cmake_vs_arch: '-A x64'
      cpack_package_type: ZIP
      cpack_executable: cpack.exe
      installer_package_path: $(System.DefaultWorkingDirectory)/build/relive-0.1-win64.zip
      installer_package_artifact_name: RELIVE-Windows64.zip
      qt5_dir: $(Build.SourcesDirectory)\Qt\5.15.2\msvc2019_64\lib\cmake\Qt5
      sdl2_dir: C:\Temp\SDL2-2.0.22
      qt5_windows_name: win64_msvc2019_64
pool:
  vmImage: $(imageName)
steps:
  - script: git submodule update --init --depth=1
    displayName: shallow clone submodules

   # Linux specific, install dev packages
  - bash: |
        sudo apt-get update
        sudo apt-get install libsdl2-dev qtdeclarative5-dev qtmultimedia5-dev qttools5-dev -y
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Linux install dev packages

   # Mac specific, install moltekn-vk, Qt5
  - bash: |
        brew install sdl2 molten-vk qt5
        export LDFLAGS="-L/usr/local/opt/qt@5/lib"
        export CPPFLAGS="-I/usr/local/opt/qt@5/include"
        export QT_DIR=/usr/local/opt/qt@5
        echo 'export PATH="/usr/local/opt/qt@5/bin:$PATH"' >> /Users/runner/.bash_profile
        mkdir build
        cd build
        mkdir Frameworks
        cp /usr/local/lib/libSDL2.dylib ./Frameworks/libSDL2.dylib
        cp /usr/local/lib/libMoltenVK.dylib ./Frameworks/libMoltenVK.dylib
    condition: eq( variables['Agent.OS'], 'Darwin' )
    displayName: macOS install moltken-vk and Qt

   # Windows specific, create game dirs, install SDL2 and Qt
  - powershell: |
       New-Item -ItemType Directory -Force -Path C:\temp
       Invoke-WebRequest 'https://github.com/AliveTeam/SDL2_win32_dev_mirror/files/8710940/SDL2-devel-2.0.22-VC.zip' -OutFile C:\temp\SDL2-devel-2.0.22-VC.zip
       7z x C:\Temp\SDL2-devel-2.0.22-VC.zip -oC:\Temp
       pip install aqtinstall
       aqt list-qt windows desktop --arch 5.15.2
       New-Item -ItemType Directory -Force -Path C:\Qt
       cd C:\Qt
       aqt install-qt windows desktop 5.15.2 $(qt5_windows_name)
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Windows Create game dirs, install SDL2 and Qt

  - script: |
        cmake --version
        mkdir build
        cd build
        echo "$(qt5_dir)"
        echo "$(cmake_generator_type)"
        echo "$(cmake_vs_arch)"
        cmake -DQt5_DIR="$(qt5_dir)" -DSDL2_DIR="$(sdl2_dir)" -DBUILD_NUMBER=$(Build.BuildId) -DCI_PROVIDER="AzureDevOps" -G"$(cmake_generator_type)" "$(cmake_vs_arch)" ..
    displayName: cmake configure

  - script: |
        cd build
        cmake --build .
    displayName: Compile

  - script: |
        cd build
        ctest
    displayName: Run tests

  - script: |
        cd build
        $(cpack_executable) -G $(cpack_package_type)
    displayName: Build installer

  - publish: $(installer_package_path)
    artifact: $(installer_package_artifact_name)
